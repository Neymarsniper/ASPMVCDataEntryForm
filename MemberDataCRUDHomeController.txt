public class HomeController : Controller
    {
        private readonly MemberDirectoryContext _context;

        public HomeController(MemberDirectoryContext context)
        {
            _context = context;
        }

        // GET: Home
        public async Task<IActionResult> Index()
        {
            //return _context.MemberDirectoryData != null ? View(await _context.MemberDirectoryData.ToListAsync()) : Problem("Entity set 'MemberDirectoryContext.MemberDirectoryData'  is null.");
            return RedirectToAction("Login");
        }


        //GET
        public IActionResult Login()
        {
            if (HttpContext.Session.GetString("UserSession") != null)
            {
                return RedirectToAction("Details");
            }
            return View();
        }

        [HttpPost]
        public IActionResult Login(MemberDirectoryDatum user)
        {
            var myuser = _context.MemberDirectoryData.Where(x => x.Email == user.Email && x.UserPassword == user.UserPassword).FirstOrDefault();
            //It checks if a user with matching credentials exists in the database.
            if (myuser != null)
            {
                HttpContext.Session.SetString("UserSession", myuser.Email);  // In this case, the user's email is stored in a session variable named "UserSession."
                                                                             // This session variable is used to keep track of whether a user is logged in. Storing the email is a common practice to identify the user in future requests.
                return RedirectToAction("Details", new { id = myuser.Name });
            }
            else
            {
                ViewBag.message = "Login Failed...";
            }
            return View();
        }

        public IActionResult Logout()
        {
            if (HttpContext.Session.GetString("UserSession").ToString() != null)
            {
                HttpContext.Session.Remove("UserSession");
                return RedirectToAction("Login");
            }
            return View();
        }

        //// GET: Home/Details/5
        //public async Task<IActionResult> Details(string id)
        //{
        //    if (id == null || _context.MemberDirectoryData == null)
        //    {
        //        return NotFound();
        //    }

        //    var memberDirectoryDatum = await _context.MemberDirectoryData.FirstOrDefaultAsync(m => m.Name == id);
        //    if (memberDirectoryDatum == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(memberDirectoryDatum);
        //}


        // GET: Home/Details/5
        public async Task<IActionResult> Details(string id)
        {
            if (_context.MemberDirectoryData == null && HttpContext.Session.GetString("UserSession") == null)
            {
                return RedirectToAction("Login");
            }

            var memberDirectoryDatum = await _context.MemberDirectoryData.FirstOrDefaultAsync(m => m.Name == id);
            if (memberDirectoryDatum == null)
            {
                return NotFound();
            }

            return View(memberDirectoryDatum);
        }

        // GET: Home/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Home/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,MemNo,Dob,ResAddress,ResPhone,OfficeNo,Profession,OfficeAddress,MobileNo,AlternateMobileNo,Email,DateofMarriage,NameofSpouse,SpouseDob,ChildName,UserPassword")] MemberDirectoryDatum memberDirectoryDatum)
        {
            if (ModelState.IsValid)
            {
                _context.Add(memberDirectoryDatum);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Login));
            }
            return View(memberDirectoryDatum);
        }

        // GET: Home/Edit/5
        public async Task<IActionResult> Edit(string id)
        {
            if (id == null || _context.MemberDirectoryData == null)
            {
                return NotFound();
            }

            var memberDirectoryDatum = await _context.MemberDirectoryData.FindAsync(id);
            if (memberDirectoryDatum == null)
            {
                return NotFound();
            }
            return View(memberDirectoryDatum);
        }

        // POST: Home/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string id, [Bind("Name,MemNo,Dob,ResAddress,ResPhone,OfficeNo,Profession,OfficeAddress,MobileNo,AlternateMobileNo,Email,DateofMarriage,NameofSpouse,SpouseDob,ChildName,UserPassword")] MemberDirectoryDatum memberDirectoryDatum)
        {
            if (id != memberDirectoryDatum.Name)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(memberDirectoryDatum);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!MemberDirectoryDatumExists(memberDirectoryDatum.Name))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                //return RedirectToAction(nameof(Details));
                return RedirectToAction("Details", new { id = memberDirectoryDatum.Name });
            }
            return View(memberDirectoryDatum);
        }




        // GET: Home/Delete/5
        public async Task<IActionResult> Delete(string id)
        {
            if (id == null || _context.MemberDirectoryData == null)
            {
                return NotFound();
            }

            var memberDirectoryDatum = await _context.MemberDirectoryData.FirstOrDefaultAsync(m => m.Name == id);
            if (memberDirectoryDatum == null)
            {
                return NotFound();
            }

            return View(memberDirectoryDatum);
        }

        // POST: Home/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string id)
        {
            if (_context.MemberDirectoryData == null)
            {
                return Problem("Entity set 'MemberDirectoryContext.MemberDirectoryData'  is null.");
            }
            var memberDirectoryDatum = await _context.MemberDirectoryData.FirstOrDefaultAsync(m => m.Name == id);
            if (memberDirectoryDatum != null)
            {
                _context.MemberDirectoryData.Remove(memberDirectoryDatum);
            }
            
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool MemberDirectoryDatumExists(string id)
        {
          return (_context.MemberDirectoryData?.Any(e => e.Name == id)).GetValueOrDefault();
        }
    }